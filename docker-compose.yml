version: '3.8'

services:
  # API Gateway - Entry point for all client requests
  api-gateway:
    build:
      context: .
      dockerfile: ./services/api-gateway/Dockerfile
    ports:
      - "5000:5000"
    environment:
      - PORT=5000
      - NODE_ENV=production
      - JWT_SECRET=${JWT_SECRET}
    depends_on:
      - user-service
      - document-service
      - freezone-service
      - ai-research-service
      - scraper-service
    networks:
      - microservices-network
    restart: unless-stopped

  # User Management Service
  user-service:
    build:
      context: .
      dockerfile: ./services/user-service/Dockerfile
    environment:
      - PORT=3001
      - NODE_ENV=production
      - DATABASE_URL=${DATABASE_URL_USER_SERVICE}
      - JWT_SECRET=${JWT_SECRET}
    depends_on:
      - message-broker
      - postgres
    networks:
      - microservices-network
    restart: unless-stopped

  # Document Management Service
  document-service:
    build:
      context: .
      dockerfile: ./services/document-service/Dockerfile
    environment:
      - PORT=3002
      - NODE_ENV=production
      - DATABASE_URL=${DATABASE_URL_DOCUMENT_SERVICE}
    volumes:
      - document-uploads:/app/uploads
    depends_on:
      - message-broker
      - postgres
    networks:
      - microservices-network
    restart: unless-stopped

  # Freezone Data Service
  freezone-service:
    build:
      context: .
      dockerfile: ./services/freezone-service/Dockerfile
    environment:
      - PORT=3003
      - NODE_ENV=production
      - DATABASE_URL=${DATABASE_URL_FREEZONE_SERVICE}
    depends_on:
      - message-broker
      - postgres
    networks:
      - microservices-network
    restart: unless-stopped

  # AI Research Service
  ai-research-service:
    build:
      context: .
      dockerfile: ./services/ai-research-service/Dockerfile
    environment:
      - PORT=3004
      - NODE_ENV=production
      - DATABASE_URL=${DATABASE_URL_AI_RESEARCH_SERVICE}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
    depends_on:
      - message-broker
      - postgres
    networks:
      - microservices-network
    restart: unless-stopped

  # Scraper Service
  scraper-service:
    build:
      context: .
      dockerfile: ./services/scraper-service/Dockerfile
    environment:
      - PORT=3005
      - NODE_ENV=production
      - DATABASE_URL=${DATABASE_URL_SCRAPER_SERVICE}
    depends_on:
      - message-broker
      - postgres
    networks:
      - microservices-network
    restart: unless-stopped

  # Message Broker (RabbitMQ)
  message-broker:
    image: rabbitmq:3-management
    ports:
      - "5672:5672"  # AMQP protocol port
      - "15672:15672" # Management UI port
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_USER}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_PASSWORD}
    volumes:
      - rabbitmq-data:/var/lib/rabbitmq
    networks:
      - microservices-network
    restart: unless-stopped

  # Database (PostgreSQL)
  postgres:
    image: postgres:15-alpine
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_MULTIPLE_DATABASES=user_db,document_db,freezone_db,ai_research_db,scraper_db
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./scripts/init-multiple-postgresql-databases.sh:/docker-entrypoint-initdb.d/init-multiple-postgresql-databases.sh
    networks:
      - microservices-network
    restart: unless-stopped

  # Frontend Application
  frontend:
    build:
      context: .
      dockerfile: ./client/Dockerfile
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - VITE_API_URL=http://localhost:5000
    networks:
      - microservices-network
    restart: unless-stopped

networks:
  microservices-network:
    driver: bridge

volumes:
  postgres-data:
  rabbitmq-data:
  document-uploads:
