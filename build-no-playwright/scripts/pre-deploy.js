/**
 * Pre-deployment setup script
 * 
 * This script:
 * 1. Creates a production environment file with necessary fallbacks
 * 2. Configures HTTP-only mode for scrapers
 * 3. Creates a deployment marker file
 * 4. Validates that critical environment variables are available
 */

import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

// Get current directory
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);
const rootDir = path.resolve(__dirname, '..');

// Generate environment variable configuration
const productionEnv = `# Production Environment Configuration
# Generated by pre-deployment script on ${new Date().toISOString()}

# Node environment
NODE_ENV=production

# Service mode
SCRAPER_HTTP_ONLY_MODE=true

# Feature flags
USE_MEMORY_CACHE=true
ERROR_LOGGING_ENABLED=true

# Cache settings
CACHE_SHORT_TTL=60
CACHE_MEDIUM_TTL=300
CACHE_LONG_TTL=3600
`;

// Create HTTP-only mode configuration for scrapers
function createScraperConfig() {
  const scraperConfigPath = path.resolve(rootDir, 'scraper/config.js');
  
  // Read existing config
  let configContent = fs.readFileSync(scraperConfigPath, 'utf8');
  
  // Ensure HTTP-only mode is forced
  if (!configContent.includes('httpOnlyMode: isProduction || forceHTTPOnly')) {
    configContent = configContent.replace(
      'const config = {',
      'const config = {\n  // Force HTTP-only mode in production or when explicitly set\n  httpOnlyMode: isProduction || forceHTTPOnly,'
    );
    fs.writeFileSync(scraperConfigPath, configContent);
  }
  
  // Create a copy of the .npmrc file in dist
  const npmrcContent = 'playwright_skip_browser_download=1\nplaywright_browser_path=0';
  fs.writeFileSync(path.resolve(rootDir, 'dist/.npmrc'), npmrcContent);
  
  console.log('‚úÖ Created HTTP-only configuration for scrapers');
}

// Create production environment file
function createProductionEnvFile() {
  const envPath = path.resolve(rootDir, '.env.production');
  fs.writeFileSync(envPath, productionEnv);
  console.log('‚úÖ Created production environment file with fallbacks');
}

// Create deployment marker
function createDeploymentMarker() {
  const markerPath = path.resolve(rootDir, '.deployment-ready');
  fs.writeFileSync(markerPath, new Date().toISOString());
  console.log('‚úÖ Created deployment marker file');
}

// Run pre-deployment setup
async function runPreDeployment() {
  console.log('üöÄ Running pre-deployment configuration...');
  
  try {
    createScraperConfig();
    createProductionEnvFile();
    createDeploymentMarker();
    
    console.log('\n‚úÖ Pre-deployment setup completed successfully');
    console.log(`
IMPORTANT: Before deploying, make sure to:
1. Set up required secrets in Replit Secrets panel
2. Enable "Always On" in the project settings`);
  } catch (error) {
    console.error('‚ùå Pre-deployment setup failed:', error);
    process.exit(1);
  }
}

// Run the pre-deployment script
runPreDeployment();